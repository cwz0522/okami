\ core.ok - basic definitions for okami
\ Copyright (C) 2018 Wolfgang Jaehrling
\
\ ISC License
\
\ Permission to use, copy, modify, and/or distribute this software for any
\ purpose with or without fee is hereby granted, provided that the above
\ copyright notice and this permission notice appear in all copies.
\
\ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
\ WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
\ MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
\ ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
\ WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
\ ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
\ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

create : docol , [create docol , exit]
: ; [lit exit , exit]

: here [hp @];
: 0, [0 ,];

\ helpers for defining control structures
: from-here [here 0,];
: to-here [here swap !];

: if [[0branch] from-here];
: then [to-here];
: else [[branch] from-here >r to-here r>];

: begin [here];
: while [[0branch] from-here];
: repeat [[branch] swap , to-here];

: with [[create dodoes , lit] from-here [,]];
: does [[exit] to-here];

: const with [,] does [@];
: var with [0,] does [];

4 const cell
: cells [cell *];
: cell+ [cell +];
: cell- [cell -];
: #cells [cell /];

-1 const true
0  const false
: on  [true  swap !];
: off [false swap !];

: 1+ [1 +];
: 1- [1 -];
: 1+! [dup @ 1+ swap !];
: 0= [0 =];
: 0<> [0 <>];
: negate [0 swap -];

: ' [word find];
: alias [here ' hp ! create hp !];

: ? [@ .];
: bye [0 sysexit];

: 2drop [drop drop];

: cr [10 emit];
: space [32 emit];
: char [key drop key];
: c!+ [dup >r @ c! r> dup @ 1+ swap !]; \ TODO: should be builtin

: abs [dup 0 <] if [negate] then ;  \ TODO: simplify with <? once available

: max [2dup >] if [drop] else [nip] then ;
: min [2dup <] if [drop] else [nip] then ;

: mod [/mod drop];

: array with [cells allot drop] does [swap cells +];

: struct{ [0];
: field with [over , +] does [@ +];
: }struct with [,] does [@ allot const];

: align begin [here over mod 0<>] while [0 c,] repeat [drop];

: (read-delimited) [key >r] begin [key r@ <>?] while [c,] repeat [drop rdrop];
: (write-strlen) \ str-addr --
    [here over - #cells 1- swap !];
: str with [from-here  key drop  (read-delimited)  cell align  (write-strlen)];
      does [];

: str. [cell+] begin [dup c@ dup 0<>] while [emit 1+] repeat [2drop];
