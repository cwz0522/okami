\ test.ok - automated tests for okami
\ Copyright (C) 2018 Wolfgang Jaehrling
\
\ ISC License
\
\ Permission to use, copy, modify, and/or distribute this software for any
\ purpose with or without fee is hereby granted, provided that the above
\ copyright notice and this permission notice appear in all copies.
\
\ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
\ WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
\ MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
\ ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
\ WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
\ ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
\ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

\ we want to check whether a mess was created on the stack
4453 const magic1
9871 const magic2
char . const test-ok
char F const test-failed
: assert [and and] if [test-ok] else [test-failed] then [emit];
: }test [>r magic2 = >r magic1 = r> r> assert];
' }test const '}test
: test{ [magic1 magic2  '}test '} is];

\ basic stack words
test{ 4 dup 4 = swap 4 = and }
test{ 1 2 drop 1 = }
test{ 1 2 over 1 = swap 2 = and swap 1 = and }
test{ 4 5 2dup 5 = swap 4 = and swap 5 = and swap 4 = and }
test{ 1 2 3 nip 3 = swap 1 = and }
test{ 6 7 tuck 7 = swap 6 = and swap 7 = and }
test{ 8 7 >r 8 = r> 7 = and }
\ TODO: rdrop r@ 2drop

\ boolean words
test{ true false not and }
test{ true false and not }
test{ true true or  true false or  and }
test{ true false xor true true xor not and }

\ relational words
test{ 1 2 <  2 1 >  and }
test{ 2 2 >= 2 2 <= and }
test{ -2 1 < 0 -0 >= and }
test{ 3 3 =? swap 3 = and }
test{ 2 3 =? not swap 2 = and }
test{ 3 3 <>? not swap 3 = and }
test{ 2 3 <>? swap 2 = and }

\ loops
test{
  : sum1-10 [0 1] begin [dup 10 <] while [swap 2dup + nip swap 1+] repeat [drop];
  true }
test{ sum1-10 45 = }

\ convenience parsing words
test{ char a 97 = char   32 = and }

\ allot
test{ here  dup 3 cells +  3 cells allot here =
      swap  -3 cells allot here =  and  }

\ rdrop
: x^ [1 rdrop];
: y [2 x^ 5];
test{ y + 3 = }

\ alias
test{
  alias + add
  1 2 add  3 = }

\ const var array - indirectly also: with does
test{ 314 const pi  true }
test{ pi 314 = }
test{ var n  true }
test{ 88 n !  n @  88 = }
test{ 10 array xs  true }
test{ 99 4 xs !  21 3 xs !
      4 xs @           99 =
      3 xs @           21 =  and
      4 xs @ 3 xs @ + 120 =  and }
test{ var a  2 a !  a 1+!  a @ 3 = }

\ struct
test{
 struct{
    cell field x
    cell field y
    cell field z
  } point
  true
}test
test{ 0 x 0 =  0 y cell =  and }
test{
  point p
  4 p x !  5 p y !
  p x @  p y @  + 9 = }

\ recursion
test{
  : fact [dup 0=] if [1+] else [dup 1- fact *] then ;
  true }
test{ 0 fact 1 = }
test{ 5 fact 120 = }
: fib [dup 1 >] if [dup 1- fib swap 2 - fib +] then ;
test{ 10 fib 55 = }

\ strings
str hello "Hello, world!"
test{ hello @ 4 = }
test{ hello cell+ c@ char H = }
test{ hello 16 + c@ char ! = }
test{ hello 17 + c@ 0 = }
test{ hello 20 + here = }

\ alignment
test{ 1 allot entry a dopush , 77 ,  a @ 77 =
      3 allot entry b dopush , 78 ,  b @ 78 =  and }
test{ 11 cell aligned 12 = }
test{ 12 cell aligned 12 = }
test{ 13 cell aligned 16 = }

\ defer/is
test{
  defer foo
  : bar [3];
  : baz [5];
  ' bar ' foo is  true }
test{ foo 3 = }
test{ ' baz ' foo is  foo 5 = }

\ end of tests
cr bye
