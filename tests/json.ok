\ json.ok - automated tests for lib/json.ok
\ Copyright (C) 2018 Wolfgang Jaehrling
\
\ ISC License
\
\ Permission to use, copy, modify, and/or distribute this software for any
\ purpose with or without fee is hereby granted, provided that the above
\ copyright notice and this permission notice appear in all copies.
\
\ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
\ WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
\ MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
\ ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
\ WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
\ ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
\ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

testfile "json.ok"

section "arrays"
test{
  jary   2 jint swap jary+   5 jint swap jary+   drop
  const: a   true
}
test{
  : sum [0 swap] jary:each [jval +] jary:next ;
  a sum 7 =
}

section "jobj:find"
test{
  jobj   99 jint swap str' .foo. swap jobj+
         98 jint swap str' .bar. swap jobj+   drop
  const: o
  true }
test{ o str' .bar. jobj:find nip }
test{ o str' .bar. jobj:find drop jval 98 = }
test{ o str' .foo. jobj:find nip }
test{ o str' .foo. jobj:find drop jval 99 = }
test{ o str' .fox. jobj:find not }

section "jobj:finder:"
test{
  str' .foo. jobj:finder: find-foo
  str' .bar. jobj:finder: find-bar
  str' .fox. jobj:finder: find-fox
  true }

test{ o find-bar nip }
test{ o find-bar drop jval 98 = }
test{ o find-foo nip }
test{ o find-foo drop jval 99 = }
test{ o find-fox not }

section "json."
jprint>buf? on
test{
  jtrue json.
  jbuf str' .true. str= }
test{
  jfalse json.
  jbuf str' .false. str= }
test{
  jnull json.
  jbuf str' .null. str= }
test{
  jary drop  json.
  jbuf str' .[]. str= }
test{
  jobj drop  json.
  jbuf str' .{}. str= }
test{
  -1200 jfix  json.
  jbuf str' "-1.200" str= }
test{
  -3 jint  json.
  jbuf str' "-3" str= }
test{
  0 jint  json.
  jbuf str' "0" str= }
test{
  jary str' .abc\def"ghi. jstr swap jary+ drop json.
  jbuf str' .["abc\\def\"ghi"]. str= }
test{
  jary  -1200 jfix swap jary+ jtrue swap jary+ jobj drop swap jary+ drop json.
  jbuf str' '[-1.200,true,{}]' str= }
test{
  o json.
  jbuf str' .{"foo":99,"bar":98}. str= }
