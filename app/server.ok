\ server.ok - HTTP server
\ Copyright (C) 2018 Wolfgang Jaehrling
\
\ ISC License
\
\ Permission to use, copy, modify, and/or distribute this software for any
\ purpose with or without fee is hereby granted, provided that the above
\ copyright notice and this permission notice appear in all copies.
\
\ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
\ WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
\ MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
\ ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
\ WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
\ ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
\ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

8086 config:server-port !
config:remote-access off
tcpipv6-server

256 const /line
create request-line /line allot
create header-line  /line allot
var (line)
: request [request-line (line) !];
: header  [header-line  (line) !];
: line [(line) @];

: -crlf? [10 =? >r 13 =? r> or not];
: skip-lf [peekreqb 10 =] if [getreqb drop] then ;
: fill-line
    [line] begin [getreqb -crlf?] while [over c! 1+] repeat
    [drop 0 swap c!  skip-lf];

\ headers
var content-length
var connection
  0 const connection:close
  1 const connection:keep-alive
private{

  : skip-bl begin [1+ dup c@ bl =] while repeat ;
  var header-name
  var header-val
  : name&val! [2dup skip-bl header-val ! header-name !];

  : upper?         [>r r@ lit] char A , [>= r@ lit] char Z , [<= and r> swap];
  : upper>lower    [lit] char a char A - , [+];
  : -upcase        [upper?] if [upper>lower] then ;
  : downcase-range rfor [dup c@ -upcase over c! 1+] next ;

  : -eol^ [0=?] if [drop rdrop] then ;
  : -colon? [lit] char : , [<>];
  : search-colon [line] begin [dup c@ -eol^ -colon?] while [1+] repeat ;
  : found? [dup c@ 0<>];
  : parse-hdr [line search-colon found?] if [name&val! downcase-range] then ;

  \ individual header types
  : content-length! [cs>n content-length !];
  : connection!     [drop connection:close connection !]; \ TODO

  : defhdr          [: [lit] , [str-at?] if [header-val @] swap , [rdrop] then ;];

  ' content-length! str' "content-length:" defhdr content-length^
  ' connection!     str' "connection:"     defhdr connection^

  : either-of ;
  : ignore [drop];
  : -empty [line c@ 0<>];

  : interpret-hdr [header-name @] either-of
                  [content-length^ connection^ ignore];

}in{
: hdrs [header] begin [fill-line -empty] while [parse-hdr interpret-hdr] repeat ;
}

\ request parsing
: start-http [0 filled !  0 processed !];
: fwd-past \ addr c -- addr'
    [>r] begin [dup c@ r@ <>] while [1+] repeat [1+ rdrop];
var http-method
var http-url
var http-proto-version
: method             [dup http-method !  bl fwd-past];
: url                [dup http-url !  bl fwd-past];
: proto-version      [http-proto-version !];
: parse-request-line [line method url proto-version];
: request-line       [request fill-line parse-request-line];
: parse-request      [start-http request-line hdrs];

parse-request

: print-buf [filled @ >r requestbuf] begin [r> 1- 0<>?] while [>r c@+ emit] repeat [2drop];
\ print-buf

\ send it back!
\ MSG_NOSIGNAL /requestbuf requestbuf  client socket @  send(syscall) succeed

\ bye
